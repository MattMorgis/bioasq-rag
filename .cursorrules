### Project Overview

This is a Python-based RAG demo using the BioASQ dataset.

###

This project uses `uv` for project management.

`uv add`: Add a dependency to the project.
`uv add <dep> --dev`: Add a development dependency
`uv remove`: Remove a dependency from the project.
`uv sync`: Sync the project's dependencies with the environment.
`uv lock`: Create a lockfile for the project's dependencies.
`uv run`: Run a command in the project environment.
`uv tree`: View the dependency tree for the project.

### Test Fixtures

All test fixtures should be in the `tests/conftest.py` file.
Please reference `tests/conftest.py` before creating new fixtures.

Only create new fixtures in test files if they are specific to that test file's use cases.
Otherwise, add them to conftest.py for reuse across test files.

### Build and Test Requirements

IMPORTANT:

1. Test-Driven Development (TDD) Workflow:

   - Always check for and update corresponding test files first
   - Follow Red-Green-Refactor pattern:
     - Write/update tests first (Red)
     - Implement code to make tests pass (Green)
     - Refactor while keeping tests green
   - Test files should mirror source file structure in tests/ directory

2. After ALL code changes:

   - Run `uv run pytest` to verify changes
   - Fix any test errors (warnings can be ignored)
   - If tests pass, proceed with commit
   - If tests fail, fix issues and rerun tests

3. Documentation:

   - Update relevant documentation if API changes
   - Add docstrings for new functions/classes
   - Update domain model if entity relationships change

4. Code Style:

   - Follow .editorconfig rules
   - Use type hints for all new code
   - Add comments for complex logic
   - Keep functions focused and small

5. After completing ANY task:
   - Run tests with `uv run pytest`
   - Add a one-line summary to .cursor-updates in markdown
   - Report test status to user

If you forget, the user can type the command "finish" and you will run the tests and update `.cursor-updates`.
